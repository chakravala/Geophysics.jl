# Quantity Dimensions

*Physical unit system constants (Metric, English, Natural, etc...)*

[![DOI](https://zenodo.org/badge/317419353.svg)](https://zenodo.org/badge/latestdoi/317419353)

```@contents
Pages = ["unitsystems.md","constants.md"]
Depth = 1
```
```@contents
Pages = ["dimension.md"]
```
```@contents
Pages = ["convert.md","units.md"]
Depth = 1
```

```@docs
Constant
Dimension
Quantity
Similitude.ConvertUnit
@unitgroup
@unitdim
```

In aggregate, the `UnitSystem` data generated here presents a new universal standardization for dimensional analysis, which generalizes upon previous historical systems up to the 2019 redefinition and unifies them in a common `Universe`.
This enables a more precise and generalized standardization than the 2019 redefinition, which was comparatively limited in scope.
Specified default `UnitSystem` values are to be taken as a newly defined mutually-compatible recommended standard, verified to be consistent and coherent.
A `UnitSystem` can only be useful as a measuring standard if it can be scientifically reproduced, so the data here has been implemented in several important scientific programming languages (initially in the Julia language but also Wolfram language and Rust langauge) as well as presented abstractly in terms of dimensional formulas.

> In fact there is nothing transcendental about dimensions; the ultimate principle is precisely expressible (in Newton's terminology) as one of *similitude*, exact or approximate, to be tested by the rule that mere change in the magnitudes of the ordered scheme of units of measurement that is employed must not affect sensibly the forms of the equations that are the adequate expression of the underlying relations of the problem. (J.L.)

Specifications for dimensional units are in the [UnitSystems.jl](https://github.com/chakravala/UnitSystems.jl) and [Similitude.jl](https://github.com/chakravala/Similitude.jl) and [MeasureSystems.jl](https://github.com/chakravala/MeasureSystems.jl) repositories.
The three packages are designed so that they can be interchanged with compatibility.
On its own `UnitSystems` is the fastest package, while `Similitude` (provides `Quantity` type) and `MeasureSystems` (introduces [Measurements.jl](https://github.com/JuliaPhysics/Measurements.jl) uncertainty) build additional features on top of `UnitSystems` base defintions.
Additionally, in the `UnitSystems` repository there is an equivalent [Wolfram language paclet](https://reference.wolfram.com/language/guide/Paclets) `Kernel` and also an unmaintained Rust `src` implementation.
Defaults are shared across the packages: `Metric`, `SI2019`, `CODATA`, `Conventional`, `International`, `InternationalMean`, `MetricEngineering`, `SI2019Engineering`, `GravitationalMetric`, `GravitationalSI2019`, `FPS`, `IPS`, `British`, `English`, `Survey`, `Gauss`, `LorentzHeaviside`, `Thomson`, `EMU`, `ESU`, `IAU`, `IAUE`, `IAUJ`, `Hubble`, `Cosmological`, `CosmologicalQuantum`, `Meridian`, `Nautical`, `MPH`, `KKH`, `MTS`, `FFF`, `Planck`, `PlanckGauss`, `Stoney`, `Hartree`, `Rydberg`, `Schrodinger`, `Electronic`, `Natural`, `NaturalGauss`, `QCD`, `QCDGauss`, and `QCDoriginal`.

```Julia
julia> using UnitSystems # or Similitude or MeasureSystems
```

A `UnitSystem` is a consistent set of dimensional values selected to accomodate a particular use case standardization.
It is possible to convert derived physical quantities from any `UnitSystem` specification into any other using accurate values.
Eleven fundamental constants `kB`, `ħ`, `𝘤`, `μ₀`, `mₑ`, `Mᵤ`, `Kcd`, `θ`, `λ`, `αL`, `g₀` are used to govern a specific unit system consistent scaling.
These are the constants `boltzmann`, `planckreduced`, `lightspeed`, `vacuumpermeability`, `electronmass`, `molarmass`, `luminousefficacy`, `angle`, `rationalization`, `lorentz`, and `gravity`.
Different choices of natural units or physical measurements result in a variety of unit systems for many purposes.

```math
k_B, \qquad \hbar, \qquad c, \qquad \mu_0, \qquad m_e, \qquad M_u, \qquad K_{cd}, \qquad \theta, \qquad \lambda, \qquad \alpha_L, \qquad g_0
```
Historically, older electromagnetic unit systems also relied on a `rationalization` constant `λ` and a `lorentz` force proportionality constant `αL`.
In most unit systems these extra constants have a value of `1` unless specified.

Specification of `Universe` with the dimensionless `Coupling` constants `coupling`, `finestructure`, `electronunit`, `protonunit`, `protonelectron`, and `darkenergydensity`. Alterations to these values can be facilitated and quantified using parametric polymorphism.
Due to the `Coupling` interoperability, the `MeasureSystems` package is made possible to support calculations with `Measurements` having error standard deviations.

Similar packages: [UnitSystems.jl](https://github.com/chakravala/UnitSystems.jl), [Similitude.jl](https://github.com/chakravala/Similitude.jl), [MeasureSystems.jl](https://github.com/chakravala/MeasureSystems.jl), [PhysicalConstants.jl](https://github.com/JuliaPhysics/PhysicalConstants.jl), [MathPhysicalConstants.jl](https://github.com/LaGuer/MathPhysicalConstants.jl), [Unitful.jl](https://github.com/PainterQubits/Unitful.jl), [UnitfulUS.jl](https://github.com/PainterQubits/UnitfulUS.jl), [UnitfulAstro.jl](https://github.com/JuliaAstro/UnitfulAstro.jl), [UnitfulAtomic.jl](https://github.com/sostock/UnitfulAtomic.jl), [NaturallyUnitful.jl](https://github.com/MasonProtter/NaturallyUnitful.jl), and [UnitfulMoles.jl](https://github.com/rafaqz/UnitfulMoles.jl).

### Default UnitSystems

By default, this package provides a modern unified re-interpretation of various historical unit systems which were previously incompatible.
In order to make each `UnitSystem` consistently compatible with each other, a few convenience assumptions are made.
Specifically, it is assumed that all default modern unit systems share the same common `Universe` of dimensionless constants, although this can be optionally changed.
Therefore, the philosophy is to characterize differences among `UnitSystem` instances by means of dimensional constants.
As a result, all the defaults are ideal modern variants of these historical unit systems based on a common underlying `Universe`, which are completely consistent and compatible with each other.
These default `UnitSystem` values are to be taken as a newly defined mutually-compatible recommended standard, verified to be consistent and coherent.

```@index
Pages = ["unitsystems.md"]
```

## Metric SI Unit Systems

In the Systeme International d'Unites (the SI units) the `UnitSystem` constants are derived from the most accurate possible physical measurements and a few exactly defined constants.
Exact values are the `avogadro` number, `boltzmann` constant, `planck` constant, `lightspeed` definition, and elementary `charge` definition.

```math
N_A = 6.02214076\mathrm{e}{23},
k_B = 1.380649\mathrm{e}{-23},
h = 6.62607015\mathrm{e}{-34},
c = 299792458,
e = 1.602176634\mathrm{e}{-19}
```

```Julia
julia> NA # avogadro
NA = 6.02214076e23

julia> kB # boltzmann
kB = 1.380649e-23

julia> 𝘩 # planck
𝘩 = 6.62607015e-34

julia> 𝘤 # lightspeed
𝘤 = 2.99792458e8

julia> 𝘦 # charge
𝘦 = 1.602176634e-19
```

Physical measured values with uncertainty are electron to proton mass ratio `μₑᵤ`, proton to atomic mass ratio `μₚᵤ`, inverted fine structure constant `αinv`, the Rydberg `R∞` constant, and the Planck mass `mP`.

```math
\mu_{eu} = \frac{m_e}{m_u} \approx \frac{1}{1822.9},
\mu_{pu} = \frac{m_p}{m_u} \approx 1.00727647,
\alpha \approx \frac{1}{137.036},
R_\infty \approx 1.097373\mathrm{e}{7},
m_P \approx 2.176434\mathrm{e}{-8},
```

```Julia
julia> μₑᵤ # electronunit
μₑᵤ = 0.000548579909065 ± 1.6e-14

julia> μₚᵤ # protonunit
μₚᵤ = 1.007276466621 ± 5.3e-11

julia> αinv # 1/finestructure
α⁻¹ = 137.035999084 ± 2.1e-8

julia> R∞ # rydbgerg
R∞ = 1.097373156816e7 ± 2.1e-5

julia> mP # planckmass
mP = 2.176434e-8 ± 2.4e-13
```

From these numbers along with the optional `4π` Gaussian `rationalization` value, the constants `planckreduced`, `permeability`, `electronmass`, `molarmass`, and proton to electon mass ratio are computed.

```math
\hbar = \frac{h}{2\pi}, \qquad
\mu_0 = \frac{2h\alpha}{ce^2}, \qquad
m_e = \frac{2hR_\infty}{c\alpha^2}, \qquad
M_u = \frac{m_e}{\mu_{eu}}N_A = \frac{2h R_\infty N_A}{c\alpha^2\mu_{eu}}, \qquad
\mu_{pe} = \frac{\mu_{pu}}{\mu_{eu}} = \frac{m_p}{m_e}
```

```Julia
julia> ħ # planckreduced
𝘩*τ⁻¹ = 1.0545718176461565e-34

julia> μ₀ # vacuumpermeability
𝘩*𝘤⁻¹𝘦⁻²α*2 = 1.25663706212e-6 ± 1.9e-16

julia> mₑ # electronmass
𝘩*𝘤⁻¹R∞*α⁻²2 = 9.1093837016e-31 ± 2.8e-40

julia> Mᵤ # molarmass
𝘩*𝘤⁻¹NA*R∞*α⁻²μₑᵤ⁻¹2 = 0.00099999999966 ± 3.1e-13

julia> μₚₑ # protonelectron
μₑᵤ⁻¹μₚᵤ = 1836.15267343 ± 1.1e-7
```
Additional reference values include the ground state `hyperfine` structure transition frequency of caesium-133 `ΔνCs` and `luminousefficacy` of monochromatic radiation `Kcd` of 540 THz.

```Julia
julia> ΔνCs # hyperfine
ΔνCs = 9.19263177e9

julia> Kcd # luminousefficacy
Kcd = 683.01969009009
```
As result, there are variants based on the original `molarmass` constant and Gaussian `permeability` along with the 2019 redefined exact values. The main difference between the two is determined by $M_u$ and $\mu_0$ offset.

```math
(M_u,\mu_0,R_u,g_0,h,c,R_\infty,\alpha,\mu_{eu}) \quad \mapsto \quad
m_e = \frac{2R_\infty h}{c\alpha^2}, \quad
k_B = \frac{m_e R_u}{\mu_{eu} g_0 M_u}, \quad
K_{cd} = 683\frac{555.016\tilde h}{555h}
```

Construction of `UnitSystem` instances based on specifying the the constants `molarmass`, the `vacuumpermeability`, and the `molargas` along with some other options is facilitated by `MetricSystem`.
This construction helps characterize the differences between 

## Natural Unit Systems

With the introduction of the `planckmass` a set of natural atomic unit systems can be derived in terms of the gravitational coupling constant.

```math
\alpha_G = \left(\frac{m_e}{m_P}\right)^2, \qquad
\tilde k_B = 1, \qquad
(\tilde M_u = 1, \quad \tilde \lambda = 1, \quad \tilde \alpha_L = 1)
```

```Julia
julia> αG # (mₑ/mP)^2
𝘩²𝘤⁻²mP⁻²R∞²α⁻⁴2² = 1.75181e-45 ± 3.9e-50
```

Some of the notable variants include

```Julia
Planck       ::UnitSystem{1,1,1,1,√(4π*αG)}
PlanckGauss  ::UnitSystem{1,1,1,4π,√αG}
Stoney       ::UnitSystem{1,αinv,1,4π,√(αG*αinv)}
Hartree      ::UnitSystem{1,1,αinv,4π/αinv^2,1}
Rydberg      ::UnitSystem{1,1,2αinv,π/αinv^2,1/2}
Schrodinger  ::UnitSystem{1,1,αinv,4π/αinv^2,√(αG*αinv)}
Electronic   ::UnitSystem{1,αinv,1,4π,1}
Natural      ::UnitSystem{1,1,1,1,1}
NaturalGauss ::UnitSystem{1,1,1,4π,1}
QCD          ::UnitSystem{1,1,1,1,1/μₚₑ}
QCDGauss     ::UnitSystem{1,1,1,4π,1/μₚₑ}
QCDoriginal  ::UnitSystem{1,1,1,4π/αinv,1/μₚₑ}
```

## UnitSystem Index

```@index
Pages = ["dimension.md","unitsystems.md"]
```

